{"ast":null,"code":"var _jsxFileName = \"/home/qwerty/Documents/react/todo-list/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport TodoTask from \"./components/TodoTask/TodoTask\";\nimport \"./styles/styles.css\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [task, setTask] = useState(\"\");\n  const [todoList, setTodoList] = useState([]);\n\n  function addTask() {\n    if (task === \"\") {\n      toast.error(\"Digite Alguma Task\");\n    } else {\n      const idRandom = num => Math.floor(Math.random() * num);\n\n      console.log(idRandom(10));\n      const newTask = {\n        id: idRandom(9999999999999999999),\n        nameTask: task\n      };\n      setTodoList([...todoList, newTask]); //armazena as novas task ecom as antigas\n\n      toast.success(\"Task cadastrada com sucesso\");\n    }\n  }\n\n  function deleteTask(DeleteTaskById) {\n    setTodoList(todoList.filter(taskName => taskName.id !== DeleteTaskById));\n    toast.success(\"task deletada com sucesso\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(ToastContainer, {\n      autoClose: 2500,\n      pauseOnHover: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Lists\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        autoComplete: \"off\",\n        placeholder: \"Escrever task...\",\n        name: \"task\",\n        className: \"input\",\n        value: task,\n        onChange: e => setTask(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn-header\",\n        onClick: addTask,\n        children: \"Adicionar Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"line\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), todoList.map((task, key) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TodoTask, {\n        task: task,\n        deleteTask: deleteTask\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hmSeMWaa0gH39ELY2VX9rg/nwfI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/qwerty/Documents/react/todo-list/src/App.tsx"],"names":["useState","TodoTask","ToastContainer","toast","App","task","setTask","todoList","setTodoList","addTask","error","idRandom","num","Math","floor","random","console","log","newTask","id","nameTask","success","deleteTask","DeleteTaskById","filter","taskName","e","target","value","map","key"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,QAAP,MAAqB,gCAArB;AAEA,OAAO,qBAAP;AAEA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AAEA,OAAO,uCAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAU,EAAV,CAAxC;;AAEA,WAASS,OAAT,GAAyB;AACvB,QAAIJ,IAAI,KAAK,EAAb,EAAiB;AACfF,MAAAA,KAAK,CAACO,KAAN,CAAY,oBAAZ;AACD,KAFD,MAEO;AACL,YAAMC,QAAQ,GAAIC,GAAD,IAAiBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAlC;;AAEAI,MAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAAC,EAAD,CAApB;AAEA,YAAMO,OAAO,GAAG;AAAEC,QAAAA,EAAE,EAAER,QAAQ,CAAC,mBAAD,CAAd;AAAqCS,QAAAA,QAAQ,EAAEf;AAA/C,OAAhB;AACAG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcW,OAAd,CAAD,CAAX,CANK,CAMgC;;AAErCf,MAAAA,KAAK,CAACkB,OAAN,CAAc,6BAAd;AACD;AACF;;AAED,WAASC,UAAT,CAAoBC,cAApB,EAA4C;AAC1Cf,IAAAA,WAAW,CAACD,QAAQ,CAACiB,MAAT,CAAiBC,QAAD,IAAcA,QAAQ,CAACN,EAAT,KAAgBI,cAA9C,CAAD,CAAX;AACHpB,IAAAA,KAAK,CAACkB,OAAN,CAAc,2BAAd;AACE;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,cAAD;AACH,MAAA,SAAS,EAAE,IADR;AAGH,MAAA,YAAY,EAAE;AAHX;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,YAAY,EAAC,KAFf;AAGE,QAAA,WAAW,EAAC,kBAHd;AAIE,QAAA,IAAI,EAAC,MAJP;AAKE,QAAA,SAAS,EAAC,OALZ;AAME,QAAA,KAAK,EAAEhB,IANT;AAOE,QAAA,QAAQ,EAAGqB,CAAD,IAAOpB,OAAO,CAACoB,CAAC,CAACC,MAAF,CAASC,KAAV;AAP1B;AAAA;AAAA;AAAA;AAAA,cAHF,eAaE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,YAAhC;AAA6C,QAAA,OAAO,EAAEnB,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAwBE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAxBF,EA0BGF,QAAQ,CAACsB,GAAT,CAAa,CAACxB,IAAD,EAAOyB,GAAP,kBACZ;AAAA,6BACE,QAAC,QAAD;AAAwB,QAAA,IAAI,EAAEzB,IAA9B;AAAoC,QAAA,UAAU,EAAEiB;AAAhD,SAAejB,IAAI,CAACc,EAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADD,CA1BH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD;;GA3DQf,G;;KAAAA,G;AA6DT,eAAeA,GAAf","sourcesContent":["import { useState } from \"react\";\nimport TodoTask from \"./components/TodoTask/TodoTask\";\n\nimport \"./styles/styles.css\";\nimport { ITask } from \"./Interface\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nimport \"react-toastify/dist/ReactToastify.css\";\n\nfunction App() {\n  const [task, setTask] = useState(\"\");\n\n  const [todoList, setTodoList] = useState<ITask[]>([]);\n\n  function addTask(): void {\n    if (task === \"\") {\n      toast.error(\"Digite Alguma Task\");\n    } else {\n      const idRandom = (num: number) => Math.floor(Math.random() * num);\n\n      console.log(idRandom(10));\n\n      const newTask = { id: idRandom(9999999999999999999), nameTask: task };\n      setTodoList([...todoList, newTask]); //armazena as novas task ecom as antigas\n\n      toast.success(\"Task cadastrada com sucesso\");\n    }\n  }\n\n  function deleteTask(DeleteTaskById: number) {\n    setTodoList(todoList.filter((taskName) => taskName.id !== DeleteTaskById));\n\ttoast.success(\"task deletada com sucesso\");\n  }\n\n  return (\n    <div className=\"App\">\n      <ToastContainer \n\t  autoClose={2500}\n\n\t  pauseOnHover={false}\n\t  />\n      <header>\n        <h2>Lists</h2>\n\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          placeholder=\"Escrever task...\"\n          name=\"task\"\n          className=\"input\"\n          value={task}\n          onChange={(e) => setTask(e.target.value)}\n        />\n\n        <button type=\"submit\" className=\"btn-header\" onClick={addTask}>\n          Adicionar Task\n        </button>\n      </header>\n\n      <div className=\"line\"></div>\n\n      {todoList.map((task, key) => (\n        <div>\n          <TodoTask key={task.id} task={task} deleteTask={deleteTask} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}